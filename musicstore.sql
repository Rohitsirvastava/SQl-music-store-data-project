              -- SQL PROJECT --

-- Q1 WHO IS THE SENIOR MOST EMPLOYEE BASED ON A JOB TITLE
select *
from employee
order by levels desc
limit 1;

-- Q2 WHICH COUNTRIES HAVE THE MOST INOVOICE
select billing_country, count(invoice_id) 
from invoice 
group by billing_country
order by 1 desc
limit 1;

-- Q3 WHAT ARE TOP 3 VALUES OF TOTAL INVOICE
select total FROM invoice 
order by total desc
limit 3;

-- Q4 WHICH CITY HAS THE BEST CUSTOMERS ?
select sum(total) as invoice_total, billing_city from invoice
group by billing_city
order by invoice_total desc;

-- Q5 WHO IS THE BEST CUSTOMER
select customer.customer_id, customer.first_name, customer.last_name, sum(invoice.total) as total
from customer
join invoice on customer.customer_id = invoice.customer_id
group by customer.customer_id, customer.first_name, customer.last_name
order by total limit 1;

-- Q6 WRITE A QUERY TO RETURN THE EMAIL, FIRST NAME , LAST NAME & GENRE OF ALL ROCK MUSIC LISTENERS. 
-- RETURN LIST ORDERD BY ALPHABETICALLY BY EMAIL STARTING WITH A 
select distinct email, first_name, last_name
from customer
join invoice on customer.customer_id = invoice.customer_id
join invoice_line on invoice.invoice_id = invoice_line.invoice_id
where track_id in (
select track_id from track
join genre on track.genre_id = genre.genre_id
where genre.name = 'rock')
order by email;

-- Q7 Let's invite the artists who have written the most rock music in our dataset. 
-- Write a query that returns the Artist name and total track count of the top 10 rock bands
select artist.artist_id, artist.name, count(artist.artist_id) AS no_of_song
from track
join album2 on album2.album_id = track.album_id
join artist on artist.artist_id = album2.artist_id
join genre on  genre.genre_id = track.genre_id
where genre.name = 'Rock'
group by artist.artist_id, artist.name
order by  no_of_song desc
limit 10 ;

-- Q8 Return all the track names that have a song length longer than the average song length. 
-- Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first
select name, milliseconds
from track
WHERE milliseconds > (select avg(milliseconds) AS AVG_TRACK_LENGTH
 from track)
 ORDER BY milliseconds desc;

  -- Qset - 3 Advance
 -- Q 9 Find how much amount spent by each customer on artists? Write a query to return customer name, artist name and total spent
 With Best_selling_artist as (
 SELECT artist.artist_id AS artist_id, artist.name AS artist_name, SUM(invoice_line.unit_price*invoice_line.quantity) AS total_sales
	FROM invoice_line
	JOIN track ON track.track_id = invoice_line.track_id
	JOIN album2 ON album2.album_id = track.album_id
	JOIN artist ON artist.artist_id = album2.artist_id
	GROUP BY 1,2
	ORDER BY 3 DESC
	LIMIT 1
)
SELECT c.customer_id, c.first_name, c.last_name, bsa.artist_name, SUM(il.unit_price*il.quantity) AS amount_spent
FROM invoice i
JOIN customer c ON c.customer_id = i.customer_id
JOIN invoice_line il ON il.invoice_id = i.invoice_id
JOIN track t ON t.track_id = il.track_id
JOIN album2 alb ON alb.album_id = t.album_id
JOIN best_selling_artist bsa ON bsa.artist_id = alb.artist_id
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

-- Q10 We want to find out the most popular music Genre for each country. We determine the most popular genre as the genre 
-- with the highest amount of purchases. Write a query that returns each country along with the top Genre. For countries where 
-- the maximum number of purchases is shared return all Genres
with popular_music as (
select customer.country , genre.name, genre.genre_id, count(invoice_line.quantity),
row_number() over(partition by customer.country order by count(invoice_line.quantity) desc) as rowno
from invoice_line
join track on track.track_id = invoice_line.track_id
join genre on genre.genre_id = track.genre_id
JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
JOIN customer ON customer.customer_id = invoice.customer_id
group by 1,2,3
order by 1 asc, 4 desc
)
select * from popular_music where rowno <=1;

-- Q11 Write a query that determines the customer that has spent the most on music for each country. 
-- Write a query that returns the country along with the top customer and how much they spent. 
-- For countries where the top amount spent is shared, provide all customers who spent this amount.

With customer_with_country as (
select customer.customer_id,first_name,last_name,billing_country, sum(total) as total_spent,
row_number() over(partition by billing_country order by sum(total) desc) as rno
from invoice
join customer on invoice.customer_id = customer.customer_id
group by 1,2,3,4
order by total_spent desc)
select * from customer_with_country where rno <= 1 order by 4;


-- Here are some questions asked/generated by AI 


-- Q12 What are the top 10 most popular Albums
with Top_10_popular_albums as (
select  album2.title, sum(invoice_line.unit_price*invoice_line.quantity) as totalsale,
row_number() over(partition by album2.title order by sum(invoice_line.unit_price*invoice_line.quantity) desc) as top_list
from artist
join album2 on album2.artist_id = artist.artist_id
join track on track.album_id = album2.album_id
join invoice_line on invoice_line.track_id = track.track_id
group by 1
order by 1 asc, 2 desc
)
select title, totalsale from Top_10_popular_albums order by 2 desc limit 10;

-- Q13 which artist has sold the most albums
with most_sold_albums as (
select artist.name, artist.artist_id, album2.title, sum(invoice_line.unit_price*invoice_line.quantity),
row_number() over(partition by album2.title order by sum(invoice_line.unit_price*invoice_line.quantity) desc) as top_list
from artist
join album2 on album2.artist_id = artist.artist_id
join track on track.album_id = album2.album_id
join invoice_line on invoice_line.track_id = track.track_id
group by 1,2,3
order by 1 asc, 4 desc
)
select * from most_sold_albums
order by 4 desc
limit 1;

-- Q14 which genre has the highest average song price
with highest_than_avg as (
select genre.name, sum(invoice_line.unit_price*invoice_line.quantity) as price
from invoice_line
join track on track.track_id = invoice_line.track_id
join genre on genre.genre_id = track.genre_id
JOIN invoice ON invoice.invoice_id = invoice_line.invoice_id
JOIN customer ON customer.customer_id = invoice.customer_id
group by 1
)
select * from highest_than_avg
where price > (select avg(price) as avg_len
from highest_than_avg)
order by 2 desc;

-- Q15 wahat is the number of unique customers 
select count(distinct customer_id) as unique_customers_count
from customer;

-- Q16 which album has the highest  total sale
with Highest_total_sale as (
select  album2.title, sum(invoice_line.unit_price*invoice_line.quantity) as totalsale,
row_number() over(partition by album2.title order by sum(invoice_line.unit_price*invoice_line.quantity) desc) as top_list
from artist
join album2 on album2.artist_id = artist.artist_id
join track on track.album_id = album2.album_id
join invoice_line on invoice_line.track_id = track.track_id
group by 1
order by 1 asc, 2 desc
)
select title, totalsale from Highest_total_sale
order by 2 desc
limit 1;

-- Q17 Wich is the most costly album
select album2.title, invoice_line.unit_price
from album2
join track on album2.album_id = track.album_id
join invoice_line on track.track_id = invoice_line.track_id
group by 1,2
order by 1 asc, 2  desc
limit 1;

             -- END --

